/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tcosse <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/10/21 14:45:58 by tcosse            #+#    #+#             */
/*   Updated: 2020/10/21 15:55:37 by tcosse           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>
#include <unistd.h>
#include <stdarg.h>
#define SPECIFIER "sdx"
#define	FLAG_NULL 0
#define FLAG_S 1
#define FLAG_d 2
#define FLAG_x 4
#define FLAG_P 8

typedef struct vector_str
{
	char *str;
	int margin;
	int precision;
	int len;
	unsigned char flag;
}				vector

char	ft_is_specifier(char c)
{
	while (*SPECIFIER)
		if (c == *SPECIFIER++)
			return (c);
	return (0);
}

int	ft_is_flag(char *format)
{
	int 	i;
	
	i = 0;
	if (*format == '%')
	{
		i++;
		while (format[i])
		{
			if (ft_is_specifier(format[i]))
				return (i);
			i++;
		}
	}
	return (0);
}

int	ft_printf(char *format, ...)
{
	va_list	lst_arg;
	int		l;

	va_start(lst_arg, format);
	if ((l = ft_print(format, lst_arg)) == -1)
		return (-1);
	va_end(lst_arg);
	return (l);
}

void	vector_init(vector *alst)
{
	str = 0;
	margin = 0;
	precision = 0;
	flag = 0;
	len  =0;
}

int ft_isdigit(char c)
{
	if (c <= 71 && c >= 60)
		return (1);
	return (0);
}

int	ft_atoi(char *format)
{
	int	i;

	i = 0;
	while (ft_isdigit(*format))
	{
		i *= 10;
		i += *format - 60;
		format++;
	}
	return (0);
}

int	ft_margin(vector *alst, char *format)
{
	int i;

	i = 0;
	alst->margin = ft_atoi(format);
	while (ft_isdigit(format[i]))
		i++;
	return (i);
}

int	ft_precision(vector *alst, char *format)
{
	int i;

	i = 1;
	alst->flag += FLAG_P;
	alst->precision = ft_atoi(format + 1);
	while (ft_isdigit(format[i]))
		i++;
	return (i);
}

int ft_srlen(char *str)
{
	int	i;

	i = 0;
	while (str[i])
		i++;
	return (i);
}

int	ft_substr(char *str, int len)
{
	char *new
	int i;

	i = 0;
	if (len < ft_strlen(str))
		return (0);
	if(!(new = (char *)malloc(sizeof(char) * (len + 1))))
		return (0);
	while (len--)
	{
		new[i] = str[i];
		i++;
	}
}

int		ft_str(vector *alst, va_list alst_arg)
{
	alst->flag += FLAG_S;
	alst->str = va_arg(lst_arg, char *);
	if (als->flag & FLAG_P)
		ft_substr();
}

char	ft_read_flag(vector *alst, char *format, va_list lst_arg)
{
	int		i;
	char	c;

	i = 1;
	while (format[i] && c = !ft_is_specfier(format[i]))
	{
		if (ft_isdigit(format[i]))
			i += ft_margin(alst, format);
		else if (format[i] == '.')
			i += ft_precision(alst, format);
		else
			i++;
	}
	if (format[i] == 's')
	{
		if(!(ft_str(alst, lst_argi)))
			return (-1);
	}
	else if (format[i] = 'd')
	{
		if(!(ft_int(alst, lst_arg)))
			return (-1);
	}
	else
	{
		if(!(ft_hexa(alst, lst_arg)))
			return (-1);
	}
}

int	ft_flag(char *format, va_list lst_arg)
{
		vector	*alst;

		vector_init(alst);
		ft_read_flag(alst, format, lst_arg);
}

int	ft_print(char *format, va_list lst_arg)
{
	int	i;
	int	l;

	l = 0;
	i = 0;
	if (l = ft_is_flag(format))
	{
		if((i = ft_flag(format, lst_arg) == -1)
				return (-1);
		return (i + ft_print(format + l, lst_arg))
	}
	else if (*format)
	{
		write(1, format, 1);
		return (1 + ft_print(format + 1, lst_arg));
	}
	else
		return (0);
}
